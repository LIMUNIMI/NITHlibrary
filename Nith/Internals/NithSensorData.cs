using NITHlibrary.Nith.Module;

namespace NITHlibrary.Nith.Internals
{
    /// <summary>
    /// Represents NITH sensor data, parsed from a NITH sensor's output. 
    /// This is usually generated by a <see cref="NithModule"/> every time it receives an input interrupt (a raw line).
    /// This class holds various properties and methods to manage and retrieve sensor-related information.
    /// </summary>
    public class NithSensorData
    {
        /// <summary>
        /// Gets or sets the raw data line as a string.
        /// </summary>
        public string RawLine { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the name of the sensor.
        /// </summary>
        public string SensorName { get; set; }

        /// <summary>
        /// Gets or sets the version of the sensor.
        /// </summary>
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets the sensor's status code.
        /// </summary>
        public NithStatusCodes StatusCode { get; set; }

        /// <summary>
        /// Gets or sets the list of parsed NITH parameters.
        /// </summary>
        public List<NithParameterValue> Values { get; set; }

        /// <summary>
        /// Gets or sets additional data associated with the sensor.
        /// </summary>
        public string ExtraData { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="NithSensorData"/> class.
        /// </summary>
        public NithSensorData()
        {
            SensorName = "";
            Version = "";
            ExtraData = "";
            StatusCode = NithStatusCodes.NaC;
            Values = [];
        }

        /// <summary>
        /// Resets all the values to empty state.
        /// </summary>
        public void Reset()
        {
            SensorName = "";
            Version = "";
            ExtraData = "";
            StatusCode = NithStatusCodes.NaC;
            Values = [];
        }

        /// <summary>
        /// Retrieves the value of a specific parameter.
        /// </summary>
        /// <param name="parameter">The parameter which value should be retrieved.</param>
        /// <returns>The parameter value if found; otherwise, <c>null</c>.</returns>
        public NithParameterValue? GetParameterValue(NithParameters parameter)
        {
            foreach (var value in Values)
            {
                if (value.Parameter == parameter)
                {
                    return value;
                }
            }
            return null;
        }

        /// <summary>
        /// Determines whether a specific parameter is present in the sensor data.
        /// </summary>
        /// <param name="parameter">The parameter representing the parameter to check.</param>
        /// <returns><c>true</c> if the parameter are present; otherwise, <c>false</c>.</returns>
        public bool ContainsParameter(NithParameters parameter)
        {
            return Values.Any(value => value.Parameter == parameter);
        }

        /// <summary>
        /// Determines whether a list of parameters are present in the sensor data.
        /// </summary>
        /// <param name="parameters">The list of parameters representing the parameters to check.</param>
        /// <returns><c>true</c> if all parameters are present; otherwise, <c>false</c>.</returns>
        public bool ContainsParameters(List<NithParameters> parameters)
        {
            foreach (var parameter in parameters)
            {
                if (!ContainsParameter(parameter))
                {
                    return false;
                }
            }
            return true;
        }
    }
}