using NITHlibrary.Nith.Internals;
using NITHlibrary.Nith.Preprocessors;
using NITHlibrary.Tools.Ports;

namespace NITHlibrary.Nith.Module
{
    /// <summary>
    /// The main NITH module class. Reads incoming raw data strings from a NITH sensor, 
    /// and sends formatted SensorData to all the behaviors. Should be connected to a receiver as a listener.
    /// </summary>
    public class NithModule_old : IDisposable, IPortListener
    {
        private readonly char[] _lineDelimSymbol = ['$'];

        /// <summary>
        /// Initializes a new instance of the <see cref="NithModule"/> class.
        /// </summary>
        public NithModule_old()
        {
            LastError = NithErrors.NaE;
        }

        /// <summary>
        /// Error behaviors are called when an error occurs.
        /// </summary>
        public List<INithErrorBehavior> ErrorBehaviors { get; protected set; } = [];

        /// <summary>
        /// Expected parameters for the sensor. If any parameter is specified, the behaviors will only be called if the sensor data contains the specified parameters. If empty, all data will be accepted.
        /// </summary>
        public List<NithParameters> ExpectedParameters { get; set; } = [];

        /// <summary>
        /// Expected sensor names. If any sensor name is specified, the behaviors will only be called if the sensor data contains the specified sensor name. If empty, all data will be accepted.
        /// </summary>
        public List<string> ExpectedSensorNames { get; set; } = [];

        /// <summary>
        /// Gets or sets the expected sensors versions. If any version is specified, the behaviors will only be called if the sensor data contains the specified version. If empty, all data will be accepted.
        /// </summary>
        public List<string> ExpectedVersions { get; set; } = [];

        /// <summary>
        /// Gets the last error generated by the module.
        /// </summary>
        public NithErrors LastError { get; protected set; }

        /// <summary>
        /// Gets the last sensor data received by the module.
        /// </summary>
        public NithSensorData LastSensorData { get; protected set; } = new();

        /// <summary>
        /// Sensor behaviors are called each time sensor data is received.
        /// </summary>
        public List<INithSensorBehavior> SensorBehaviors { get; protected set; } = [];

        /// <summary>
        /// Preprocessors are used to transform the data before sending it to the behaviors.
        /// </summary>
        public List<INithPreprocessor?> Preprocessors { get; protected set; } = [];

        /// <summary>
        /// Disposes the resources used by the <see cref="NithModule"/> class.
        /// </summary>
        public void Dispose()
        {
            ErrorBehaviors.Clear();
            SensorBehaviors.Clear();
        }

        /// <summary>
        /// Process the port data coming from the receiver.
        /// </summary>
        /// <param name="line">The raw data line received from the sensor.</param>
        void IPortListener.ReceivePortData(string line)
        {
            NithSensorData data = new();
            var error = NithErrors.NaE;

            try
            {
                data.RawLine = line;

                if (line.StartsWith(_lineDelimSymbol[0].ToString()))
                {
                    error = NithErrors.Ok; // Set to ok, then check if wrong
                    try
                    {
                        // Check for extra data field
                        var extraData = "";
                        if (line.Split(_lineDelimSymbol).Length > 2)
                        {
                            extraData = line.Split(_lineDelimSymbol)[2];
                        }

                        // Output splitting
                        var standardLine = line.Split(_lineDelimSymbol)[1];

                        var fields = standardLine.Split('|');
                        var firstField = fields[0].Split('-');
                        var arguments = fields[2].Split('&');

                        // Parsings
                        data.ExtraData = extraData;
                        data.SensorName = firstField[0];
                        data.Version = firstField[1];
                        data.StatusCode = NithParsers.ParseStatusCode(fields[1]);
                        foreach (var v in arguments)
                        {
                            string[] s = v.Split('=');
                            var argumentName = s[0];
                            NithParameterValue value = new(NithParsers.ParseField(argumentName), s[1]);

                            data.Values.Add(value);
                        }
                    }
                    catch
                    {
                        error = NithErrors.OutputCompliance;
                    }

                    // Further error checking

                    // Check name
                    if (ExpectedSensorNames.Contains(data.SensorName) || ExpectedSensorNames.Count == 0)
                    {
                        // Check version
                        if (ExpectedVersions.Contains(data.Version) || ExpectedVersions.Count == 0)
                        {
                            // Check status code
                            if (data.StatusCode != NithStatusCodes.ERR)
                            {
                                // Check arguments
                                if (ExpectedParameters.Count != 0 && !data.ContainsParameters(ExpectedParameters))
                                {
                                    error = NithErrors.Parameters;
                                }
                            }
                            else
                            {
                                error = NithErrors.StatusCode;
                            }
                        }
                        else
                        {
                            error = NithErrors.Version;
                        }
                    }
                    else
                    {
                        error = NithErrors.Name;
                    }
                }
                else
                {
                    error = NithErrors.OutputCompliance;
                }
            }
            catch
            {
                error = NithErrors.Connection;
            }

            // Transform data using preprocessors
            foreach (var preProc in Preprocessors)
            {
                data = preProc.TransformData(data);
            }

            // Send to error behaviors
            foreach (var ebeh in ErrorBehaviors)
            {
                ebeh.HandleError(error);
            }

            // Checks and parsing done! Send to sensor behaviors
            foreach (var sbeh in SensorBehaviors)
            {
                sbeh.HandleData(data);
            }

            LastSensorData = data;
            LastError = error;
        }
    }
}